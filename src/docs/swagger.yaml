basePath: /api/v1
definitions:
  dto.DeviceDTO:
    properties:
      device_name:
        type: string
      ip:
        type: string
      session_id:
        type: string
    type: object
  dto.GenerateKeyDTO:
    properties:
      device_name:
        description: SessionId  string `json:"session_id" validate:"required"`
        type: string
    type: object
  dto.KeyAcDTO:
    properties:
      access_token:
        type: string
      key:
        type: string
      refresh_token:
        type: string
      session_id:
        type: string
    type: object
  dto.KeyDTO:
    properties:
      device_name:
        description: SessionId  string `json:"session_id" validate:"required"`
        type: string
      key:
        type: string
    required:
    - device_name
    - key
    type: object
  dto.RefreshTokenDTO:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RemoveDeviceDTO:
    properties:
      session_id:
        type: string
    required:
    - session_id
    type: object
  dto.RenameDeviceDTO:
    properties:
      new_device_name:
        type: string
      session_id:
        type: string
    required:
    - new_device_name
    - session_id
    type: object
  helper.Response:
    properties:
      data: {}
      error:
        type: string
      success:
        type: boolean
    type: object
host: dev-1.paya.dev:8000
info:
  contact:
    email: a@gmail.com
    name: API Support
  description: internal service for Auth
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: Lol
  title: Internal AUTH
  version: "0.1"
paths:
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh JWT with refresh_token and generate new tokens and will
        blacklist current refresh token.
      parameters:
      - description: Create a new atoken and rtoken
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: helper.Response'
          schema:
            $ref: '#/definitions/dto.KeyAcDTO'
        "400":
          description: 'message: helper.Response'
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: Refresh JWT with refresh_token
      tags:
      - Authentication
  /key:
    post:
      description: generate a new Key when new users install the APP.
      parameters:
      - description: Create a new token
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.GenerateKeyDTO'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: new rToken and aToken + key'
          schema:
            $ref: '#/definitions/dto.KeyAcDTO'
        "400":
          description: 'message: error message'
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Generate a new key
      tags:
      - Key
  /key/tk:
    post:
      description: generate a Key when.
      parameters:
      - description: Create a new token
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.KeyDTO'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: new rToken and aToken'
          schema:
            $ref: '#/definitions/dto.KeyAcDTO'
        "400":
          description: 'message: error message'
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: 'message: fuck'
          schema:
            $ref: '#/definitions/helper.Response'
      summary: Generate a new Token based on already existing key
      tags:
      - Key
  /rename:
    patch:
      description: rename an already existing device.
      parameters:
      - description: info for device
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RenameDeviceDTO'
      produces:
      - application/json
      responses:
        "202":
          description: 'message: removed'
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: 'message: error message'
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: 'message: fuck'
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: Rename a device
      tags:
      - Key
  /rm:
    delete:
      description: remove a single device from list\nafter removing a device from
        list you get a 403 error on whitelist end point after that get a new key from
        /key.
      parameters:
      - description: info for device
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RemoveDeviceDTO'
      produces:
      - application/json
      responses:
        "204":
          description: 'message: removed'
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: 'message: error message'
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: 'message: fuck'
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove a device
      tags:
      - Key
  /rm/all:
    delete:
      description: remove all devices from list except the current device\nafter removing
        a device from list you get a 403 error on whitelist end point after that get
        a new key from /key.
      produces:
      - application/json
      responses:
        "204":
          description: 'message: removed'
          schema:
            $ref: '#/definitions/helper.Response'
        "400":
          description: 'message: error message'
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: 'message: fuck'
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: Remove all devices
      tags:
      - Key
  /rw:
    get:
      consumes:
      - application/json
      description: removes a device IP and its identifier to the user's whitelist,
        ensuring the device is not allowed to access the service.
      parameters:
      - description: token
        in: query
        name: tk
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully removed whitelisted the device
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: remove a device to the whitelist
      tags:
      - Whitelist
  /show:
    get:
      description: show all of active devices.
      produces:
      - application/json
      responses:
        "201":
          description: 'message: list of devices'
          schema:
            items:
              $ref: '#/definitions/dto.DeviceDTO'
            type: array
        "400":
          description: 'message: error message'
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: 'message: fuck'
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: show all of currently active sessions
      tags:
      - Key
  /w:
    get:
      consumes:
      - application/json
      description: Adds a device IP and its identifier to the user's whitelist, ensuring
        the device is allowed to access the service.
      parameters:
      - description: token
        in: query
        name: tk
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully whitelisted the device
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: Add a device to the whitelist
      tags:
      - Whitelist
  /w/premium:
    get:
      consumes:
      - application/json
      description: Adds a device IP and its identifier to the user's whitelist, ensuring
        the device is allowed to access the service.
      parameters:
      - description: token
        in: query
        name: tk
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully whitelisted the device
          schema:
            $ref: '#/definitions/helper.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/helper.Response'
      security:
      - ApiKeyAuth: []
      summary: Add a device to the whitelist (free premium)
      tags:
      - Whitelist
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: authorization
    type: apiKey
swagger: "2.0"
